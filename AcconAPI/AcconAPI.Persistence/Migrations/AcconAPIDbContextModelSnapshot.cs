// <auto-generated />
using System;
using AcconAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcconAPI.Persistence.Migrations
{
    [DbContext(typeof(AcconAPIDbContext))]
    partial class AcconAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcconAPI.Domain.Auth.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AcconAPI.Domain.Auth.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Faq.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FaqPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VisiblePage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FaqPageId");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ImageFiles");

                    b.HasDiscriminator<string>("FileType").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Gallery.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GalleryPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GalleryPhotoId")
                        .HasColumnType("uuid");

                    b.Property<int>("IsVisible")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GalleryPageId");

                    b.HasIndex("GalleryPhotoId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Language.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.News.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CommentShow")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NewsCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NewsPageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("NewsCategoryId");

                    b.HasIndex("NewsPageId");

                    b.HasIndex("PhotoId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.News.NewsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NewsCategories");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.PageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Pages");

                    b.HasDiscriminator<string>("Page").HasValue("PageEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Partner.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Portfolio.PortfolioCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PortfolioCategories");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Service.ServiceSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("ServicePageId");

                    b.ToTable("ServiceSections");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Slider.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Button1Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Button1Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Button2Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Button2Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.SocialMedia.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.TeamMember.Designation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.TeamMember.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DesignationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Youtube")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("PhotoId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Testimonial.Testimonial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestimonialPageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TestimonialPageId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.WhyChooseUs.WhyChoose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IconPhotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IconPhotoId");

                    b.ToTable("WhyChooses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.AboutPagePhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("AboutPagePhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.FaqMainPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("FaqMainPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.GalleryPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("GalleryPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.News.NewsBanner", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("NewsBanner");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.News.NewsPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("NewsPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.PartnerPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("PartnerPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Portfolio.BannerPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("BannerPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Portfolio.FeaturedPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("FeaturedPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Portfolio.OtherPhotos", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("OtherPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Service.ServiceBanner", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("ServiceBanner");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Service.ServicePhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("ServicePhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.SliderPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("SliderPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.TeamMemberPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("TeamMemberPhotos");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Testimonial.TestimonialMainPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("TestimonialMain");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.Testimonial.TestimonialPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("TestimonialPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.WhyChooseUs.ChooseUsIconPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("ChooseUsIcon");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.WhyChooseUs.ChooseUsMainPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("ChooseUsMainPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.File.WhyChooseUs.ChooseUseBackgroundPhoto", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.File.File");

                    b.HasDiscriminator().HasValue("ChooseUsBackgroundPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.AboutPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissionContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MissionHeading")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uuid");

                    b.Property<string>("VisionContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VisionHeading")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("PhotoId");

                    b.HasDiscriminator().HasValue("AboutPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.ContactPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("ContactPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.FaqPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("FaqPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.Gallery", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.Property<Guid?>("GalleryPageId")
                        .HasColumnType("uuid");

                    b.HasIndex("GalleryPageId");

                    b.HasDiscriminator().HasValue("Gallery");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.GalleryPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("GalleryPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.HomePage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("HomePage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.NewsPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("NewsPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.PortfolioPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("PortfolioPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.PrivacyPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Pages", t =>
                        {
                            t.Property("Content")
                                .HasColumnName("PrivacyPage_Content");
                        });

                    b.HasDiscriminator().HasValue("PrivacyPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.ServicePage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("ServicePage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.TermsPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TermsPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.TestimonialPage", b =>
                {
                    b.HasBaseType("AcconAPI.Domain.Entities.Page.PageEntity");

                    b.HasDiscriminator().HasValue("TestimonialPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Faq.Faq", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.Page.FaqPage", "FaqPage")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Gallery.Gallery", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.Page.GalleryPage", "GalleryPage")
                        .WithMany()
                        .HasForeignKey("GalleryPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.File.GalleryPhoto", "GalleryPhoto")
                        .WithMany()
                        .HasForeignKey("GalleryPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalleryPage");

                    b.Navigation("GalleryPhoto");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.News.News", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.News.NewsBanner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.News.NewsCategory", "NewsCategory")
                        .WithMany("News")
                        .HasForeignKey("NewsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.Page.NewsPage", "NewsPage")
                        .WithMany("News")
                        .HasForeignKey("NewsPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.File.News.NewsPhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("NewsCategory");

                    b.Navigation("NewsPage");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Partner.Partner", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.PartnerPhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Service.ServiceSection", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.Service.ServiceBanner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.File.Service.ServicePhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.Page.ServicePage", "ServicePage")
                        .WithMany("ServiceSections")
                        .HasForeignKey("ServicePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Photo");

                    b.Navigation("ServicePage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Slider.Slider", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.SliderPhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.TeamMember.TeamMember", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.TeamMember.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.File.TeamMemberPhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Testimonial.Testimonial", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.Testimonial.TestimonialPhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Entities.Page.TestimonialPage", "TestimonialPage")
                        .WithMany("Testimonials")
                        .HasForeignKey("TestimonialPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("TestimonialPage");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.WhyChooseUs.WhyChoose", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.WhyChooseUs.ChooseUsIconPhoto", "IconPhoto")
                        .WithMany()
                        .HasForeignKey("IconPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IconPhoto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AcconAPI.Domain.Auth.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AcconAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AcconAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AcconAPI.Domain.Auth.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcconAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AcconAPI.Domain.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.AboutPage", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.File.AboutPagePhoto", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.Gallery", b =>
                {
                    b.HasOne("AcconAPI.Domain.Entities.Page.GalleryPage", null)
                        .WithMany("Galleries")
                        .HasForeignKey("GalleryPageId");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.News.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.FaqPage", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.GalleryPage", b =>
                {
                    b.Navigation("Galleries");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.NewsPage", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.ServicePage", b =>
                {
                    b.Navigation("ServiceSections");
                });

            modelBuilder.Entity("AcconAPI.Domain.Entities.Page.TestimonialPage", b =>
                {
                    b.Navigation("Testimonials");
                });
#pragma warning restore 612, 618
        }
    }
}
